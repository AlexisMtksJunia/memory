# Nom du workflow pour la CI/CD de l'application Memory
name: CI Memory

# Déclenchement du workflow dès qu'un push est détecté sur la branche "develop"
on:
  push:
    branches:
      - develop

jobs:
  # 4.1 : Job de test : vérifie l'intégrité des fichiers JPEG
  test-memory:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Run file command on jpgs
        run: |
          for img in $(find . -name "*.jpg"); do
            if ! file "$img" | grep -q "JPEG image data"; then
              echo "$img est corrompu. Remplacez-le par un fichier de votre choix."
            fi
          done

  # 4.2 : Job de build : construit l'image Docker du site
  build-memory:
    needs: test-memory
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t alexismtksjunia/memory .

  # 4.3 : Job de push : pousse l'image Docker sur DockerHub
  push-memory:
    needs: build-memory
    runs-on: self-hosted
    steps:
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push alexismtksjunia/memory:latest

  # 4.4 : Job de déploiement : déploie l'image sur la machine de l'utilisateur
  deploy-memory:
    needs: push-memory
    runs-on: self-hosted
    steps:
      - name: Add SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: SSH into host and deploy with docker-compose
        run: |
          ssh -o StrictHostKeyChecking=no -p 2222 alexis@185.169.159.134 'docker pull alexismtksjunia/memory && docker run -d -p 8080:8080 alexismtksjunia/memory'
